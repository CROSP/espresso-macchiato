machine:
  environment:
    # more clean command line outputs
    TERM: "dumb"
  java:
    version: oraclejdk8

dependencies:
  pre:
    # workaround for "failed to find Build Tools revision ..."
    # android list sdk --all --extended
    - echo y | android update sdk --no-ui --all --filter tool #,extra-android-m2repository,extra-android-support,extra-google-google_play_services,extra-google-m2repository,android-23
    - echo y | android update sdk --no-ui --all --filter build-tools-23.0.3
    - echo y | android update sdk --no-ui --all --filter android-8


    # create android v23 emulator as latest supported android version
    - echo no | android create avd -n my-android23 -t $(android list targets | grep android-23 | cut -d" " -f2)

    # create android v8 emulator as earliest supported android version
    - echo no | android create avd -n my-android8 -t $(android list targets | grep android-8 | cut -d" " -f2)

    # activate soft keybord because some tests do checks on it
    # - sed -i -- 's/hw.keyboard=yes/hw.keyboard=no/g' ~/.android/avd/circleci-android22.avd/config.ini
    - echo "hw.keyboard=no" >> ~/.android/avd/my-android23.avd/config.ini
    - echo "hw.keyboard=no" >> ~/.android/avd/my-android8.avd/config.ini

    # provide external space because some tests will write files there
    - $ANDROID_HOME/tools/mksdcard -l androidSDCard 64M AndroidSDCard.img

test:
  pre:
    # start emulator for instrumentation tests
    #- emulator -avd my-android23 -no-audio -no-window -sdcard AndroidSDCard.img:
    #    background: true
    # start both emulator for instrumentation tests
    - case $CIRCLE_NODE_INDEX in 0) emulator -avd my-android23 -no-audio -no-window -sdcard AndroidSDCard.img ;; 1) emulator -avd my-android8 -no-audio -no-window -sdcard AndroidSDCard.img ;; esac:
        parallel: true
        background: true

  override:
    # pre build code to see how many time each task realy need
    - ./gradlew :espressotools:assembleRelease
    - ./gradlew :library:assembleRelease
    - ./gradlew :library:assembleDebug
    - ./gradlew :library:assembleDebugAndroidTest
    - ./gradlew :sampleapp:assembleDebug
    - ./gradlew :sampleapp:assembleDebugAndroidTest

    # check lint for error reporting
    # ensure release can be build and published without issues
    - ./gradlew :espressotools:lintDebug
    - ./gradlew :library:lintDebug
    - ./gradlew :sampleapp:lintDebug

    # create javadoc to ensure release can be build and published without issues
    - ./gradlew :library:mavenAndroidJavadocs

    # ensure that the emulator is ready to use
    - case $CIRCLE_NODE_INDEX in 0) circle-android wait-for-boot ;; 1) circle-android wait-for-boot ;; esac:
        parallel: true
    #- circle-android wait-for-boot

    # remove the look screen
    - case $CIRCLE_NODE_INDEX in 0) adb shell input keyevent 82 ;; 1) adb shell input keyevent 82 ;; esac:
        parallel: true
    #- adb shell input keyevent 82

    # clear logs from emulator
    - adb logcat -c

    # start instrumentation tests on emulator
    # -i is used to see current test execution progress
    - case $CIRCLE_NODE_INDEX in 0) ./gradlew :library:connectedCheck -i ;; 1) ./gradlew :library:connectedCheck -i ;; esac:
        parallel: true
    #- ./gradlew :library:connectedCheck -i
    - ./gradlew :sampleapp:connectedCheck -i

  post:
    # collect logs from emulator and make them accessable
    - adb logcat -d | grep -v GpsLocationProvider | grep -v MediaProvider | grep -v MetadataRetrieverClient | grep -v BackupManagerService | grep -v ARMAssembler | grep -v Choreographer | grep -v IInputConnectionWrapper | grep -v "I/art" | grep -v ConnectivityService | grep -v "D/PhoneInterfaceManager" | grep -v "I/Email" | grep -v "I/Exchange" | grep -v "E/libEGL" | grep -v "D/gralloc" | grep -v "E/installd" | grep -v "D/ConnectivityManager" | grep -v "D/WIFI" | grep -v "V/Mms" > $CIRCLE_ARTIFACTS/logcat_emulator.txt

    # for espressotools module
    # collect lint report
    - mkdir -p $CIRCLE_TEST_REPORTS/espressotools_android_tests/lint
    - cp -r espressotools/build/outputs/lint* $CIRCLE_TEST_REPORTS/espressotools_android_tests/lint

    # for library module
    # collect xml test results for circle ci to analyze them
    - case $CIRCLE_NODE_INDEX in 0) mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/xml ;; 1) mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/xml ;; esac:
        parallel: true
    - case $CIRCLE_NODE_INDEX in 0) cp -r library/build/outputs/androidTest-results/connected/. $CIRCLE_TEST_REPORTS/library_android_tests/xml ;; 1) cp -r library/build/outputs/androidTest-results/connected/. $CIRCLE_TEST_REPORTS/library_android_tests/xml ;; esac:
        parallel: true

    # collect html test results and make them accessable
    - case $CIRCLE_NODE_INDEX in 0) mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/html ;; 1) mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/html ;; esac:
        parallel: true
    - case $CIRCLE_NODE_INDEX in 0) cp -r library/build/reports/androidTests/connected/. $CIRCLE_TEST_REPORTS/library_android_tests/html ;; 1) cp -r library/build/reports/androidTests/connected/. $CIRCLE_TEST_REPORTS/library_android_tests/html ;; esac:
        parallel: true
    #- mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/html
    #- cp -r library/build/reports/androidTests/connected/. $CIRCLE_TEST_REPORTS/library_android_tests/html

    # collect test coverage results and make them accessable
    - mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/coverage
    - cp -r library/build/reports/coverage/debug/. $CIRCLE_TEST_REPORTS/library_android_tests/coverage
    # collect lint report
    - mkdir -p $CIRCLE_TEST_REPORTS/library_android_tests/lint
    - cp -r library/build/outputs/lint* $CIRCLE_TEST_REPORTS/library_android_tests/lint

    # for sampleapp module
    # collect xml test results for circle ci to analyze them
    - mkdir -p $CIRCLE_TEST_REPORTS/sampleapp_android_tests/xml
    - cp -r sampleapp/build/outputs/androidTest-results/connected/. $CIRCLE_TEST_REPORTS/sampleapp_android_tests/xml
    # collect html test results and make them accessable
    - mkdir -p $CIRCLE_TEST_REPORTS/samplapp_android_tests/html
    - cp -r sampleapp/build/reports/androidTests/connected/. $CIRCLE_TEST_REPORTS/sampleapp_android_tests/html
    # collect test coverage results and make them accessable
    - mkdir -p $CIRCLE_TEST_REPORTS/sampleapp_android_tests/coverage
    - cp -r sampleapp/build/reports/coverage/debug/. $CIRCLE_TEST_REPORTS/sampleapp_android_tests/coverage
    # collect lint report
    - mkdir -p $CIRCLE_TEST_REPORTS/sampleapp_android_tests/lint
    - cp -r sampleapp/build/outputs/lint* $CIRCLE_TEST_REPORTS/sampleapp_android_tests/lint

deployment:
  coverage:
    branch: [master]
    commands:
      # report code coverage to codecov
      - bash <(curl -s https://codecov.io/bash)

  release:
    tag: /release-.*/
    owner: nenick
    commands:
      # push release artifacts to github
      - ./gradlew :library:githubRelease -PgithubUser=$GITHUB_USERNAME -PgithubKey=$GITHUB_WRITE_PUBLIC_REPOS_TOKEN
      # push release artifacts to bintray
      - ./gradlew :library:bintrayUpload -PbintrayUser=$BINTRAY_USERNAME -PbintrayKey=$BINTRAY_KEY -PdryRun=false